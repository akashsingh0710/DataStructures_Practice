class Node {
    
public:    
    char data;
    Node* next;         
};

class Stack
{
private:
 Node *top;
public:
 Stack(){
     top=NULL;
 }
    
 Node* get_top(){
     return top;
 }
    
 void push(char x);
 char pop();
 // void Display();
    
};



void Stack::push(char x)
{
 Node *t = new Node;
 if(t==NULL)  cout<<"Stak is Full\n";
 else
 {
 t->data=x;
 t->next=top;
 top=t;
 }
}


char Stack::pop()
{
 char x;
 if(top==NULL)
 cout<<"Stack is Empty\n";
 else
 {
 x=top->data;
 Node *t=top;
 top=top->next;
 delete t;
 }
 return x;

}


// void Stack::Display()
// {
//  Node *p=top;
//  while(p!=NULL)
//  {
//  cout<<p->data<<" ";
//  p=p->next;
//  }
//  cout<<endl;
// }




class Solution {
public:
    bool isValid(string s) {
      
    int i = 0;
    char val;    
    Stack stk;
    while(s[i])
        {   
        
            if (s[i]=='(' or s[i]=='{' or s[i]=='[') 
            { stk.push(s[i]);  i++;}
         
            if (s[i]==')')
            {   val = stk.pop();
                i++;
                if(val != '(')                return false;
            }
            
            if (s[i]=='}')
            {   val = stk.pop() ;
                i++;
                if(val != '{')                 return false;
            }
         
            if (s[i]==']')
            {   val = stk.pop() ;
                i++;
                if(val != '[')                return false;
            }
            
        }
        
        if (stk.get_top()) {
            return false;
        }
        
        else {
            return true;
            };       
        
        
    }
};