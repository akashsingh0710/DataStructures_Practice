#User function Template for python3

''' Node for linked list:

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

'''
class Solution:
    #Function to add two numbers represented by linked list.
    def addTwoLists(self, first, second):
        
        
        # code here
        # return head of sum list
        def reverse_ll(head):
            if head.next==None:
                return head
            
            prev=head
            forw=head.next
            prev.next=None
            
            while(1):
                temp=forw.next
                forw.next=prev
                prev = forw
                forw = temp
                
                if forw == None:
                    return prev
        
        
        
        
        
                    
        first = reverse_ll(first)
        second = reverse_ll(second)
                    
        num = first.data+second.data
        remainder = int(num/10)
        value = num%10
        
        sum_ll = Node(value)
        
        temp_f=first.next
        temp_s=second.next
        
        mov_ptr = sum_ll
        
        while(1):
            
            if temp_f==None:
                temp_f_data = 0
            else:
                temp_f_data = temp_f.data
                temp_f=temp_f.next
            
            if temp_s==None:
                temp_s_data = 0
            else:
                temp_s_data = temp_s.data
                temp_s=temp_s.next
                
            num = temp_f_data + temp_s_data + remainder
            remainder = int(num/10)
            value = num%10
            
            temp_node = Node(value)
            
            mov_ptr.next=temp_node
            mov_ptr = temp_node
            
            if(temp_f==None and temp_s==None and remainder==0):
                sum_ll = reverse_ll(sum_ll)
                # return sum_ll
                
                
                temp=sum_ll
                while(1):
                    if temp.data==0:
                        temp=temp.next
                    else: 
                        return temp
            
            
                    
        # return reverse_ll(second)            
            
                
            
            
            
            
            
            
        
        
          
        
        
        

#{ 
#  Driver Code Starts
#Initial Template for Python 3

# Node Class
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Linked List Class
class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    # creates a new node with given value and appends it at the end of the linked list
    def insert(self, val):
        if self.head is None:
            self.head = Node(val)
            self.tail = self.head
        else:
            self.tail.next = Node(val)
            self.tail = self.tail.next

# prints the elements of linked list starting with head
def printList(n):
    while n:
        print(n.data,end=' ')
        n = n.next
    print()

if __name__ == '__main__':
    for _ in range(int(input())):
        
        n = int(input())
        arr1 = ( int(x) for x in input().split() )
        LL1 = LinkedList()
        for i in arr1:
            LL1.insert(i)
        
        m = int(input())
        arr2 = ( int(x) for x in input().split() )
        LL2 = LinkedList()
        for i in arr2:
            LL2.insert(i)
        
        res = Solution().addTwoLists(LL1.head, LL2.head)
        printList(res)
# } Driver Code Ends