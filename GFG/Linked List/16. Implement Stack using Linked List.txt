# Class to represent a node
'''class StackNode:

	# Constructor to initialize a node
	def __init__(self, data):
		self.data = data
		self.next = None'''
class Node: 
      
    def __init__(self, data): 
        self.data = data 
        self.next = None

class Stack:
    def __init__(self):
        self.tail = None
        self.head = None
    # The method push to push element into
    # the stack
    def push(self, data):
        node_temp = Node(data)
        
        if self.tail==None and self.head==None:
            self.head = node_temp
            self.tail = node_temp
        else:
            node_temp.next = self.head
            self.head=node_temp
    
        # return self.tail , self.head
        # Add code here

        # The method pop which return the element
        # poped out of the stack
    
    def pop(self):
         
        #add code here
        temp1=self.head
        
        if temp1!=None:
            temp2=self.head.next
            self.head.next=None
            self.head=temp2
        
            return temp1.data
        
        return -1 
    
    
    # def pop(self):
        
    #     if(self.tail==None):
    #         return -1
            
    #     if(self.head.next==None):
    #         temp_rr= self.head
    #         self.head=None
    #         self.tail=None
    #         return temp_rr.data
        
    #     # if self.head.next==None:
    #     #     return self.head.data
        
        
    #     temp0 = self.head
    #     temp1 = temp0.next
        
        
            
    #     while(1):
    #         if temp1.next == None:
    #             temp0.next == None 
    #             self.tail=temp0
                
    #             return temp1.data
            
    #         temp0=temp0.next
    #         temp1=temp1.next
            
            
            
        # temp2=self.tail
        
        
        
        
        # return -1 
        # Add code here


#{ 
#  Driver Code Starts
if __name__ == '__main__':
    t = int(input())
    for i in range(t):
        s = Stack()
        q = int(input())
        q1 = list(map(int, input().split()))
        i = 0
        while(i < len(q1)):
            if(q1[i] == 1):
                s.push(q1[i + 1])
                i = i + 2
            elif(q1[i] == 2):
                print(s.pop(), end=" ")
                i = i + 1
            elif(s.isEmpty()):
                print(-1)
        print()

# } Driver Code Ends